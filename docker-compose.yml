version: "3.8"

services:

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "nc", "-zv", "zookeeper", "2181"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s
    restart: unless-stopped
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-logs:/var/lib/zookeeper/log

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_MIN_INSYNC_REPLICAS: "1"
    healthcheck:
      test: ["CMD", "nc", "-zv", "kafka", "9092"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s
    restart: unless-stopped
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafka-topics-init:
    container_name: kafka-topics-init
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic raw-web-events --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic enriched-web-events --replication-factor 1 --partitions 1

      echo -e 'Successfully created:'
      kafka-topics --bootstrap-server kafka:29092 --list 
      "
 
  web-events:
    container_name: web-events
    build: 
      context: ./web_events
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: "kafka:29092"
      OUTPUT_TOPIC: raw-web-events
    restart: on-failure
  
  faust-processor:
    container_name: faust-processor
    build:
      context: ./faust_processor
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: "kafka:29092"
      INPUT_TOPIC: raw-web-events
      OUTPUT_TOPIC: enriched-web-events
      WORKER_MODULE: app
    restart: unless-stopped

  setup:
    container_name: setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es-01\n"\
          "    dns:\n"\
          "      - es-01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es-01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es-01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es-01/es-01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  logstash-01:
    container_name: logstash-01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata-01:/usr/share/logstash/data
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
      KAFKA_BROKER: "kafka:29092"
      INPUT_TOPIC: enriched-web-events
      xpack.monitoring.enabled: "false"
      ELASTIC_USER: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_HOSTS: "https://es-01:9200"
      ELASTIC_INDEX: "web-events"
    restart: unless-stopped

  es-01:
    container_name: es-01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata-01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      node.name: "es-01"
      cluster.name: ${CLUSTER_NAME}
      discovery.type: single-node
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      bootstrap.memory_lock: "true"
      xpack.security.enabled: "true"
      xpack.security.http.ssl.enabled: "true"
      xpack.security.http.ssl.key: "certs/es-01/es-01.key"
      xpack.security.http.ssl.certificate: "certs/es-01/es-01.crt"
      xpack.security.http.ssl.certificate_authorities: "certs/ca/ca.crt"
      xpack.security.transport.ssl.enabled: "true"
      xpack.security.transport.ssl.key: "certs/es-01/es-01.key"
      xpack.security.transport.ssl.certificate: "certs/es-01/es-01.crt"
      xpack.security.transport.ssl.certificate_authorities: "certs/ca/ca.crt"
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.license.self_generated.type: ${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: unless-stopped

  kibana:
    container_name: kibana
    depends_on:
      es-01:
        condition: service_healthy
      setup:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: "https://es-01:9200"
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: "config/certs/ca/ca.crt"
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: unless-stopped

volumes:
 certs:
   driver: local
 esdata-01:
   driver: local
 kafka-data:
   driver: local 
 kibanadata:
   driver: local
 logstashdata-01:
   driver: local
 zk-data:
   driver: local
 zk-logs:
   driver: local
